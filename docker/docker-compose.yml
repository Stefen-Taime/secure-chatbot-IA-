
services:
  # Frontend
  frontend:
    build:
      context: ../frontend
    ports:
      - "80:80"
    depends_on:
      - nginx
      - look-api
      - tools-api
      - memory-api
      - output-api
      - keycloak
    networks:
      - frontend
      - backend  # Make sure this is included
    restart: unless-stopped

  # API Gateway
  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./services/nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - look-api
      - tools-api
      - memory-api
      - output-api
    networks:
      - frontend
      - backend
    restart: unless-stopped

  # Look API - Service de recherche
  look-api:
    build:
      context: ../api/look-api
      dockerfile: Dockerfile
    environment:
      - POSTGRES_HOST=postgres
      - ELASTICSEARCH_HOST=elasticsearch
      - VECTOR_DB_HOST=qdrant
      - REDIS_HOST=redis
      - KEYCLOAK_HOST=keycloak
      - VAULT_ADDR=http://vault:8200
    depends_on:
      - postgres
      - elasticsearch
      - qdrant
      - redis
      - keycloak
      - vault
    networks:
      - frontend
      - backend
    restart: unless-stopped

  # Tools API - Service d'actions
  tools-api:
    build:
      context: ../api/tools-api
      dockerfile: Dockerfile
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - KEYCLOAK_HOST=keycloak
      - VAULT_ADDR=http://vault:8200
    depends_on:
      - postgres
      - redis
      - keycloak
      - vault
    networks:
      - frontend
      - backend
    restart: unless-stopped

  # Memory API - Service de contexte/mémoire
  memory-api:
    build:
      context: ../api/memory-api
      dockerfile: Dockerfile
    environment:
      - REDIS_HOST=redis
      - KEYCLOAK_HOST=keycloak
      - VAULT_ADDR=http://vault:8200
    depends_on:
      - redis
      - keycloak
      - vault
    networks:
      - frontend
      - backend
    restart: unless-stopped

  # Output API - Service de formatage de sortie
  output-api:
    build:
      context: ../api/output-api
      dockerfile: Dockerfile
    environment:
      - KEYCLOAK_HOST=keycloak
      - VAULT_ADDR=http://vault:8200
    depends_on:
      - keycloak
      - vault
    networks:
      - frontend
      - backend
    restart: unless-stopped

  # Base de données PostgreSQL
  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - backend
    restart: unless-stopped

  adminer:
    image: adminer:latest
    ports:
      - "8088:8080"
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: warehouse
      ADMINER_DESIGN: pepa-linha
    networks:
      - backend  

  # Elasticsearch pour la recherche
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - backend
    restart: unless-stopped

  # Qdrant pour la base de connaissances vectorielle
  qdrant:
    image: qdrant/qdrant
    container_name: legal-analyzer-qdrant
    restart: unless-stopped
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 90s

  # Redis pour le cache
  redis:
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped

  # Keycloak pour l'authentification
  keycloak:
    image: quay.io/keycloak/keycloak:21.1.1
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_DB=postgres
      - KC_DB_URL_HOST=postgres
      - KC_DB_URL_DATABASE=${KEYCLOAK_DB}
      - KC_DB_USERNAME=${KEYCLOAK_DB_USER}
      - KC_DB_PASSWORD=${KEYCLOAK_DB_PASSWORD}
    command: start-dev --import-realm
    volumes:
      - ./services/keycloak:/opt/keycloak/data/import
    depends_on:
      - postgres
    ports:
      - "8081:8080"
    networks:
      - backend

  # HashiCorp Vault pour la gestion des secrets
  vault:
    image: hashicorp/vault:1.13.3
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_DEV_ROOT_TOKEN_ID}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    ports:
      - "8200:8200"
    networks:
      - backend
    restart: unless-stopped

  # Kibana pour la visualisation des logs
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.10
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - backend
    restart: unless-stopped

  # Logstash pour le traitement des logs
  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.10
    volumes:
      - ./services/logstash/pipeline:/usr/share/logstash/pipeline
      - ./services/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - backend
    restart: unless-stopped

  # Filebeat pour la collecte des logs
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    user: root
    volumes:
      - ./services/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - elasticsearch
      - logstash
    networks:
      - backend
    restart: unless-stopped

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  postgres_data:
  elasticsearch_data:
  qdrant_data:
  redis_data:
